@page "/"

@inject ITicketConsumer TicketConsumer
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@attribute [Authorize]

<LoginStatus />
<PageTitle>Ticket Tracker</PageTitle>

@if (showConfirmationDialog)
{
    <ConfirmationDialog Message="Do you want to delete this item?" OnConfirmation="HandleConfirmation" />
}
@if (_isLoading)
{
    <Loading />
}
@if (_tickets == null)
{
    <p>Loading Tickets...</p>
}
else
{
    <TicketDetails Ticket="_selectedTicket" IsOpen="_isOpen" OnClose="OnCloseHandler" />
    <TicketSearch />

    @if (_tickets.Any())
    {
        <div class="mb-4">
            <p class="font-italic text-center">Do you have a ticket you'd like to share? <a href="add-ticket">Add it here</a>.</p>

            <div class="float-end">
                <span class="btn btn-success btn-sm mr-2" title="Total Amount"><i class="bi bi-coin"></i> S/. @_totalAmount</span>
                <span class="btn btn-info btn-sm mr-2" title="Hotel & Rest. Services Deduction"><i class="bi bi-piggy-bank-fill"></i> S/. @_hotelRestaurantDedeuction</span>
                <span class="btn btn-warning btn-sm mr-2" title="Professional Services Deduction"><i class="bi bi-piggy-bank-fill"></i> S/. @_professionalServicesDeduction</span>
                <span class="btn btn-danger btn-sm mr-2" title="Real State Services Deduction"><i class="bi bi-piggy-bank-fill"></i> S/. @_realStateRentalDeduction</span>
                <button class="btn btn-primary btn-sm mr-2" @onclick="ExportToExcel" title="Export to excel">
                    <i class="bi bi-file-spreadsheet-fill"></i>
                </button>
                <button class="btn btn-primary btn-sm" @onclick="ExportImages" title="Export images">
                    <i class="bi bi-file-zip-fill"></i>
                </button>
            </div>
        </div>

        <TableView Items="_tickets" Context="ticket">
            <HeaderTemplate>
                <th>Ticket Number</th>
                <th>Nit</th>
                <th>Description </th>
                <th>Date Issued</th>
                <th>Amount</th>
                <th></th>
            </HeaderTemplate>
            <RowTemplate>
                <th scope="col">@ticket.TicketNumber</th>
                <td>@ticket.Nit</td>
                <td>@ticket.Description</td>
                <td>@ticket.DateIssued.Value.ToShortDateString()</td>
                <td>@ticket.Amount</td>
                <td class="text-end">
                    <button @onclick="() => HandleTicketSelected(ticket)" title="View Image" class="btn btn-primary">
                        <i class="bi bi-binoculars"></i>
                    </button>
                    <AuthorizeView>
                        @if (ticket.Owner.Equals(context.User.Identity?.Name, StringComparison.OrdinalIgnoreCase) || context.User.IsInRole(SD.Role_Admin))
                        {
                            <button @onclick="@(() => NavManager.NavigateTo($"/edit-ticket/{ticket.Id}"))" title="Edit" class="btn btn-primary">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button @onclick="@(() => ShowConfirmationDialog(ticket))" title="Delete" class="btn btn-primary">
                                <i class="bi bi-trash3"></i>
                            </button>
                        }
                    </AuthorizeView>
                </td>
            </RowTemplate>
        </TableView>

        <div class="row">
            <div class="col">
                <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
            </div>
        </div>
    }
    else
    {
        <div class="no-tickets">
            <svg viewBox="0 0 16 16" class="bi bi-tree" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M8 0a.5.5 0 0 1 .416.223l3 4.5A.5.5 0 0 1 11 5.5h-.098l2.022 3.235a.5.5 0 0 1-.424.765h-.191l1.638 3.276a.5.5 0 0 1-.447.724h-11a.5.5 0 0 1-.447-.724L3.69 9.5H3.5a.5.5 0 0 1-.424-.765L5.098 5.5H5a.5.5 0 0 1-.416-.777l3-4.5A.5.5 0 0 1 8 0zM5.934 4.5H6a.5.5 0 0 1 .424.765L4.402 8.5H4.5a.5.5 0 0 1 .447.724L3.31 12.5h9.382l-1.638-3.276A.5.5 0 0 1 11.5 8.5h.098L9.576 5.265A.5.5 0 0 1 10 4.5h.066L8 1.401 5.934 4.5z" />
                <path d="M7 13.5h2V16H7v-2.5z" />
            </svg>
            <h3 class="text-muted font-weight-light">You don't have any tickets, <a href="add-ticket">why not add one?</a></h3>
        </div>
    }
}

@code {
    private IEnumerable<TicketDto>? _tickets;
    private TicketDto? _selectedTicket;
    private bool showConfirmationDialog;
    public bool _isOpen;
    public bool _isLoading;
    public MetaData MetaData { get; set; }
    private decimal _totalAmount;
    private decimal _hotelRestaurantDedeuction;
    private decimal _professionalServicesDeduction;
    private decimal _realStateRentalDeduction;
    private ItemsParameters _itemsParameters = new();

    protected override async Task OnInitializedAsync()
    {
        await GetTickets();
        CalculateDeductions();
    }

    private void CalculateDeductions()
    {
        _totalAmount = _tickets?.Sum(t => t.Amount) ?? 0;
        _hotelRestaurantDedeuction = _tickets?.Where(x => x.ExpenseType == "Hotels and restaurants").Sum(t => t.Amount) * 15 / 100 ?? 0;
        _professionalServicesDeduction = _tickets?.Where(x => x.ExpenseType == "Professional services").Sum(t => t.Amount) * 30 / 100 ?? 0;
        _realStateRentalDeduction = _tickets?.Where(x => x.ExpenseType == "Real estate rental").Sum(t => t.Amount) * 30 / 100 ?? 0;
    }
    private async Task GetTickets()
    {
        var response = await TicketConsumer.GetTickets(_itemsParameters);

        _tickets = response.Items;
        MetaData = response.MetaData;
    }

    private async Task SelectedPage(int page)
    {
        _itemsParameters.PageNumber = page;
        await GetTickets();
    }

    private void ShowConfirmationDialog(TicketDto ticketDto)
    {
        _selectedTicket = ticketDto;
        showConfirmationDialog = true;
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        if (confirmed)
        {
            await TicketConsumer.DeleteTicket(_selectedTicket.Id);
            showConfirmationDialog = false;
            _isLoading = true;
            StateHasChanged();

            if (_tickets.Count() <= 1)
                _itemsParameters.PageNumber = (_itemsParameters.PageNumber <= 1) ? 1 : _itemsParameters.PageNumber - 1;

            await GetTickets();
            CalculateDeductions();
            _isLoading = false;
        }
        showConfirmationDialog = false;
    }

    private void OnCloseHandler()
    {
        _selectedTicket = null;
        _isOpen = false;
    }

    private void HandleTicketSelected(TicketDto ticketDto)
    {
        _selectedTicket = ticketDto;
        _isOpen = true;
    }

    private async Task ExportToExcel()
    {
        var excelFile = await TicketConsumer.ExportToExcel();
        string fileName = $"Tickets_{DateTime.Now:yyyyMMddHHmmss}.xlsx";

        // Trigger the file download
        await JsRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(excelFile), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    }

    private async Task ExportImages()
    {
        var zipImages = await TicketConsumer.ExportImages();

        await JsRuntime.InvokeVoidAsync("saveAsZip", "images.zip", Convert.ToBase64String(zipImages));
    }
}