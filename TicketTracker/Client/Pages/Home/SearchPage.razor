@page "/search/{SearchTerm}"

@inject ITicketConsumer TicketConsumer
@inject NavigationManager NavManager
@attribute [Authorize]

<PageTitle>Search Trails - Blazing Trails</PageTitle>

@if (showConfirmationDialog)
{
    <ConfirmationDialog Message="Doo you want to delete this item?" OnConfirmation="HandleConfirmation" />
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Search</li>
    </ol>
</nav>

<h3 class="mt-5 mb-4">Search results for "@SearchTerm"</h3>

@if (_searchResults == null)
{
    <p>Loading search results...</p>
}
else
{
    <TicketDetails Ticket="_selectedTicket" IsOpen="_isOpen" OnClose="OnCloseHandler" />

    @if(_searchResults.Any())
    {
        <TableView Items="_searchResults" Context="ticket">
            <HeaderTemplate>
                <th>Ticket Number</th>
                <th>Nit</th>
                <th>Description </th>
                <th>Date Created</th>
                <th>Amount</th>
                <th></th>
            </HeaderTemplate>
            <RowTemplate>
                <th scope="col">@ticket.TicketNumber</th>
                <td>@ticket.Nit</td>
                <td>@ticket.Description</td>
                <td>@ticket.DateCreated</td>
                <td>@ticket.Amount</td>
                <td class="text-end">
                    <button @onclick="() => HandleTicketSelected(ticket)" title="View Image" class="btn btn-primary">
                        <i class="bi bi-binoculars"></i>
                    </button>
                    <button @onclick="@(() => NavManager.NavigateTo($"/edit-ticket/{ticket.Id}"))" title="Edit" class="btn btn-primary">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button @onclick="@(() => ShowConfirmationDialog(ticket))" title="Delete" class="btn btn-primary">
                        <i class="bi bi-trash3"></i>
                    </button>
                </td>
            </RowTemplate>
        </TableView>
    }
    else
    {
        <div class="no-tickets">
            <svg viewBox="0 0 16 16" class="bi bi-tree" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M8 0a.5.5 0 0 1 .416.223l3 4.5A.5.5 0 0 1 11 5.5h-.098l2.022 3.235a.5.5 0 0 1-.424.765h-.191l1.638 3.276a.5.5 0 0 1-.447.724h-11a.5.5 0 0 1-.447-.724L3.69 9.5H3.5a.5.5 0 0 1-.424-.765L5.098 5.5H5a.5.5 0 0 1-.416-.777l3-4.5A.5.5 0 0 1 8 0zM5.934 4.5H6a.5.5 0 0 1 .424.765L4.402 8.5H4.5a.5.5 0 0 1 .447.724L3.31 12.5h9.382l-1.638-3.276A.5.5 0 0 1 11.5 8.5h.098L9.576 5.265A.5.5 0 0 1 10 4.5h.066L8 1.401 5.934 4.5z" />
                <path d="M7 13.5h2V16H7v-2.5z" />
            </svg>
            <h3 class="text-muted font-weight-light">You don't have any tickets with that search term.</h3>
        </div>
    }

}

@code {
    private IEnumerable<TicketDto>? _searchResults;
    private IEnumerable<TicketDto> _cachedSearchResults = Array.Empty<TicketDto>();
    private TicketDto? _selectedTicket;
    private bool showConfirmationDialog;
    public bool _isOpen;

    [Parameter] public string SearchTerm { get; set; } = default!;
    [Parameter, SupplyParameterFromQuery] public int? MaxLength { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? MaxTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetTickets();
    }

    public async Task GetTickets()
    {
        var allTickets = await TicketConsumer.GetAllTickets();

        var isNumber = long.TryParse(SearchTerm, out var nit);

        _searchResults = isNumber ? allTickets.Where(x => x.TicketNumber.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) | x.Nit.Value == nit)
                                  : allTickets.Where(x => x.TicketNumber.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase)); 
    }

    private void ShowConfirmationDialog(TicketDto ticketDto)
    {
        _selectedTicket = ticketDto;
        showConfirmationDialog = true;
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        if (confirmed)
        {
            await TicketConsumer.DeleteTicket(_selectedTicket.Id);
            await GetTickets();
        }

        showConfirmationDialog = false;
    }

    private void OnCloseHandler()
    {
        _selectedTicket = null;
        _isOpen = false;
    }

    private void HandleTicketSelected(TicketDto ticketDto)
    {
        _selectedTicket = ticketDto;
        _isOpen = true;
    }
}
