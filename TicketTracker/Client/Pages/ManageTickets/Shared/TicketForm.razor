<EditForm EditContext="_editContext" OnValidSubmit="SubmitForm">

    <FluentValidationValidator />

    <FormSection Title="Details and amount"
                 HelpText="A ticket is a commercial document that provides a detailed summary of a transaction between a seller and a buyer. It serves as a request for payment or as evidence of a financial transaction.">

        <FormFieldSet Width="col-11">
            <label for="ticketNumber" class="form-label text-muted"><b>Ticket Number</b></label>
            <InputText @bind-Value="_ticket.TicketNumber" class="form-control" id="ticketNumber" style="text-transform:uppercase" />
            <ValidationMessage For="@(() => _ticket.TicketNumber)" />
        </FormFieldSet>

        <FormFieldSet Width="col-11">
            <label for="nit" class="form-label text-muted"><b>Nit</b></label>
            <InputNumber @bind-Value="_ticket.Nit" class="form-control" id="nit" />
            <ValidationMessage For="@(() => _ticket.Nit)" />
        </FormFieldSet>

        <FormFieldSet Width="col-11">
            <label for="description" class="form-label text-muted"><b>Description</b></label>
            <InputText @bind-Value="_ticket.Description" class="form-control" id="description" style="text-transform:uppercase" />
            <ValidationMessage For="@(() => _ticket.Description)" />
        </FormFieldSet>

        <FormFieldSet Width="col-11">
            <label for="amount" class="form-label text-muted"><b>Amount</b></label>
            <InputNumber @bind-Value="_ticket.Amount" class="form-control" id="amount" />
            <ValidationMessage For="@(() => _ticket.Amount)" />
        </FormFieldSet>

        <FormFieldSet Width="col-11">
            <label for="image" class="form-label text-muted"><b>Image</b></label>
            @if (_ticket.Image is null)
            {
                <InputFile OnChange="LoadTicketImage" class="form-control" id="image" accept=".png,.jpg,.jpeg" />
            }
            else
            {
                <div class="card bg-dark text-white">
                    <ImageDisplay ImageData="_ticket.Image" />
                    <div class="card-img-overlay">
                        <button id="resetButton" class="btn btn-primary btn-sm" @onclick="RemoveTicketImage">Remove</button>
                    </div>
                </div>
            }
        </FormFieldSet>

    </FormSection>

    <div class="mt-4 mb-5">
        <div class="row">
            <div class="offset-4 col-8 text-end">
                <button class="btn btn-outline-secondary" type="button" @onclick="ResetForm">Reset</button>
                <button class="btn btn-primary" type="submit">Submit</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private TicketDto _ticket = new TicketDto();
    private IBrowserFile? _image;
    private EditContext _editContext = default!;

    [Parameter, EditorRequired] public Func<TicketDto, IBrowserFile?, Task> OnSubmit { get; set; } = default!;
    [Parameter] public TicketDto? Ticket { get; set; }

    protected override void OnParametersSet()
    {
        _editContext = new EditContext(_ticket);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

    public void ResetForm()
    {
        _ticket = new TicketDto();
        _editContext = new EditContext(_ticket);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
        _image = null;
    }

    private async Task LoadTicketImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        _ticket.Image = buffer;
        _image = e.File;
    }

    private void RemoveTicketImage()
    {
        _ticket.Image = null;
    }

    private async Task SubmitForm() => await OnSubmit(_ticket, _image);
}